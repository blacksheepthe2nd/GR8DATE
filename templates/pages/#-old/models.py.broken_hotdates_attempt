# pages/models.py
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from datetime import timedelta
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    # ... your existing Profile fields ...
    created_at = models.DateTimeField(auto_now_add=True)
    is_approved = models.BooleanField(default=False)
    # ... rest of your Profile model ...

class ProfileImage(models.Model):
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='images')
    image = models.ImageField(upload_to='profile_images/')
    is_private = models.BooleanField(default=False)
    uploaded_at = models.DateTimeField(auto_now_add=True)

class Thread(models.Model):
    user_a = models.ForeignKey(User, on_delete=models.CASCADE, related_name='threads_a')
    user_b = models.ForeignKey(User, on_delete=models.CASCADE, related_name='threads_b')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ['user_a', 'user_b']

    def get_other_user(self, user):
        return self.user_b if user == self.user_a else self.user_a

    @classmethod
    def get_or_create_for(cls, user1, user2):
        user_a, user_b = sorted([user1, user2], key=lambda u: u.id)
        thread, created = cls.objects.get_or_create(user_a=user_a, user_b=user_b)
        return thread

    @property
    def last_message(self):
        return self.messages.order_by('-created_at').first()

class Message(models.Model):
    thread = models.ForeignKey(Thread, on_delete=models.CASCADE, related_name='messages')
    sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sent_messages')
    recipient = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_messages')
    text = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['created_at']

class Like(models.Model):
    liker = models.ForeignKey(User, on_delete=models.CASCADE, related_name='likes_given')
    liked_user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='likes_received')
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ['liker', 'liked_user']

class Block(models.Model):
    blocker = models.ForeignKey(User, on_delete=models.CASCADE, related_name='blocking')
    blocked = models.ForeignKey(User, on_delete=models.CASCADE, related_name='blocked_by')
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ['blocker', 'blocked']

class PrivateAccessRequest(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('denied', 'Denied'),
    ]
    
    requester = models.ForeignKey(User, on_delete=models.CASCADE, related_name='access_requests_sent')
    target_user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='access_requests_received')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    created_at = models.DateTimeField(auto_now_add=True)
    reviewed_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='reviewed_requests')
    reviewed_at = models.DateTimeField(null=True, blank=True)
    expires_at = models.DateTimeField(null=True, blank=True)

    def save(self, *args, **kwargs):
        if self.status == 'approved' and not self.expires_at:
            self.expires_at = timezone.now() + timedelta(hours=72)
        super().save(*args, **kwargs)

# Blog Model
class Blog(models.Model):
    class Status(models.TextChoices):
        DRAFT = 'draft', 'Draft'
        SCHEDULED = 'scheduled', 'Scheduled' 
        PUBLISHED = 'published', 'Published'

    title = models.CharField(max_length=200)
    slug = models.SlugField(unique=True)
    summary = models.TextField(blank=True)
    content = models.TextField()
    status = models.CharField(max_length=20, choices=Status.choices, default=Status.DRAFT)
    published_at = models.DateTimeField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-published_at', '-created_at']

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        if self.status == self.Status.PUBLISHED and not self.published_at:
            self.published_at = timezone.now()
        super().save(*args, **kwargs)

# User Activity Model
class UserActivity(models.Model):
    ACTION_CHOICES = [
        ('login', 'Login'),
        ('logout', 'Logout'),
        ('view_profile', 'View Profile'),
        ('update_profile', 'Update Profile'),
        ('send_message', 'Send Message'),
        ('view_blog', 'View Blog'),
        ('search', 'Search'),
        ('like', 'Like'),
        ('block', 'Block'),
        ('admin_message_sent', 'Admin Message Sent'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    action = models.CharField(max_length=50, choices=ACTION_CHOICES)
    timestamp = models.DateTimeField(auto_now_add=True)
    ip_address = models.GenericIPAddressField(null=True, blank=True)
    user_agent = models.TextField(blank=True)
    target_content_type = models.ForeignKey(ContentType, on_delete=models.SET_NULL, null=True, blank=True)
    target_object_id = models.PositiveIntegerField(null=True, blank=True)
    extra_data = models.JSONField(null=True, blank=True)

    class Meta:
        ordering = ['-timestamp']
        verbose_name_plural = 'User activities'

    def __str__(self):
        return f"{self.user.username} - {self.get_action_display()} - {self.timestamp}"

    @property
    def target_object(self):
        if self.target_content_type and self.target_object_id:
            try:
                return self.target_content_type.get_object_for_this_type(pk=self.target_object_id)
            except:
                return None
        return None

class HotDate(models.Model):
    AUDIENCE_CHOICES = [
        ('everyone', 'Everyone'),
        ('males', 'Males Only'),
        ('females', 'Females Only'),
    ]
    
    GROUP_SIZE_CHOICES = [
        ('1on1', '1-on-1'),
        ('small', 'Small Group (2-4)'),
        ('medium', 'Medium Group (5-8)'),
        ('large', 'Large Group (9+)'),
    ]
    
    host = models.ForeignKey(User, on_delete=models.CASCADE, related_name='hosted_hotdates')
    title = models.CharField(max_length=200)
    activity = models.CharField(max_length=200)
    vibe = models.CharField(max_length=100)
    budget = models.CharField(max_length=100)
    duration = models.CharField(max_length=100)
    date_time = models.DateTimeField()
    area = models.CharField(max_length=100)
    group_size = models.CharField(max_length=20, choices=GROUP_SIZE_CHOICES)
    audience = models.CharField(max_length=20, choices=AUDIENCE_CHOICES, default='everyone')
    
    # New fields for cancellation system
    is_active = models.BooleanField(default=True)
    is_cancelled = models.BooleanField(default=False)
    cancelled_at = models.DateTimeField(null=True, blank=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.title} by {self.host.username}"

    class Meta:
        ordering = ['date_time']

class HotDateView(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    hot_date = models.ForeignKey(HotDate, on_delete=models.CASCADE)
    viewed_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ['user', 'hot_date']

class HotDateParticipant(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    hot_date = models.ForeignKey(HotDate, on_delete=models.CASCADE, related_name='participants')
    joined_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ['user', 'hot_date']

class HotDateNotification(models.Model):
    NOTIFICATION_TYPES = [
        ('cancelled', 'Cancelled'),
        ('updated', 'Updated'),
        ('reminder', 'Reminder'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='hotdate_notifications')
    hot_date = models.ForeignKey(HotDate, on_delete=models.CASCADE)
    notification_type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES)
    message = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    read_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.user.username} - {self.notification_type} - {self.hot_date.title}"
